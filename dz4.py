# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
import random

# numbres_one = int(input('Введите кол-во элементов: '))
# numbres_two = int(input('Введите кол-во элементов: '))

# mn_one = set()
# mn_two = set()

# for i in range(numbres_one):
#     mn_one.add(random.randint(1, numbres_one))
# print(mn_one)

# for i in range(numbres_two):
#     mn_two.add(random.randint(1, numbres_two))
# print(mn_two)

# if mn_one > mn_two:
#     sum_onetwo= sorted(mn_one.difference(mn_two))
# if mn_two == mn_one:
#     sum_onetwo= sorted(mn_one.difference(mn_two))
# else:
#     sum_onetwo= sorted(mn_two.difference(mn_one))
# print(f'Уникальные числа двух множеств: {sum_onetwo}')


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой грядке, причем кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

# number = int(input('Введите кол-во кустов: '))

# i = 1
# sum = 0
# max_i = 0
# array = []
# for i in range(number):
#     array.append(random.randint(1, 31))
# print(array)

# while i < len(array):
#     sum_1 = array[i-1]+array[i]+array[i+1]
#     if sum < sum_1:
#         max_i +=i
#         sum = sum_1
#         i +=1
#     else:
#         i+1
# print(sum)